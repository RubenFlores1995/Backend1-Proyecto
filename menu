import os, time
import numpy as np #1
from keras.models import Sequential #6
from keras.layers import Dense

import pandas as pd #2
import matplotlib.pyplot as plt #3
from sklearn.linear_model import LinearRegression #4

import tensorflow as tf #5
from tensorflow.keras.datasets import mnist
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense

from bs4 import BeautifulSoup #7
import requests #8

import pygame #90

import cv2 #10

def limpiar_pantalla():
    os.system('cls')

def capturar_nombre():
    nombre = input("Cual es tu nombre? ")
    saludo = "Hola "+ nombre + "!"
    print (saludo)

def sueldo():
    horas_trabajadas = float(input("Ingrese el numero de horas trabajadas: "))
    costo_hora = float(input("Ingrese el sueldo por hora: $"))
    paga = horas_trabajadas * costo_hora
    print("La paga correspondiente es: $" +str(round(paga,2)))

def indMasaCorpo():
    peso = float(input("Ingresa tu peso en Kg: "))
    estatura = float(input("Ingresa tu estatura en Metros: "))
    IdMC = peso/((estatura)**2)
    print("Tu indice de masa corporal es " +str(round(IdMC,2)) +"donde" +str(round(IdMC,2)) + "es el indice de masa corporal calculado redondeado con dos decimales.")

def inversion():
    inversion = float(input("Ingresa el monto a invertir: $"))
    intanu = float(input("Ingresa el porcentaje de interes anual (%): "))
    anio = int(input("Ingresa la cantidad de años (enteros): "))
    int_dcml = intanu / 100
    valorfinal = inversion * (1+((int_dcml*anio)))
    print("El monto final de tu inversion es: $"+ str(round(valorfinal,2)))

def pesopaquete():
    ps_pys = 112
    ps_mnc = 75
    num_pys = int(input("Ingrese el numero de payasos vendidos: "))
    num_mncs = int(input("Ingrese el numero de muñecas vendidas: "))
    ps_total = (ps_pys * num_pys) + (ps_mnc * num_mncs)
    print("El peso total del paquete a enviar es de: ", ps_total, "gramos")

def blncata():
    monto_deposito = float(input("Ingresa la cantidad de dinero depositado en la cuenta de ahorros: $"))
    int_anual = 0.04
    blnc_anio_1 = monto_deposito * (1 + int_anual)
    blnc_anio_2 = blnc_anio_1 * (1 + int_anual)
    blnc_anio_3 = blnc_anio_2 * (1 + int_anual)
    print("Balance despues del primer año: $", round(blnc_anio_1,2))
    print("Balance despues del segundo año: $", round(blnc_anio_2,2))
    print("Balance despues del tercer año: $", round(blnc_anio_3,2))

def formula():
    n = int(input("Ingrese un numero entero positivo: "))
    suma = (n * (n + 1)) / 2
    print("La suma de los primeros numeros", n,"numeros es: $", round(suma,2))

def impr_notaventa(nombres, precios):

    nmbr_estable = "Mayarrotes"
    dir_estable = "Blvd. Cucapah 20100-Sur, El Lago, 22210 Tijuana, B.C."
    num_estable = "1234567890"

    print()
    print()
    print("== Nota de Venta ==")
    print("Establecimiento:", nmbr_estable)
    print("Dirección:", dir_estable)
    print("Teléfono:", num_estable)
    print("===================")


    sub_total = 0
    for i in range(len(nombres)):
        print("Articulo: ", nombres[i])
        print("Precio: $", precios[i])
        sub_total += precios[i]
        print("--------------------------")

    if sub_total==500 or sub_total>500:
        
        vlr_iva = 2
        iva = sub_total * 0.02
        totalf = sub_total + iva
    
    else:
        vlr_iva = 5
        iva = sub_total * 0.05
        totalf = sub_total + iva

    print()
    print()
    print("Subtotal: $", sub_total)
    print("IVA " + str(vlr_iva) +"%", str(round(iva,2)))
    print("Total a pagar: $", str(round(totalf,2)))
    print("=============================")
    print()
    print()

def agregarvalorespila():
    print("Vamos agregar 4 valoes a una pila con cicloo for: ")
    pila = [1,2,3]

    new_num1 = []

    print(pila)
    print()
    for i in [0,1,2,3]:
        new_num1 = int(input("ingresa un nuevo valor: "))
        pila.append(new_num1)
    print()
    print("La nueva pila es: ")
    print()
    print(pila)

def agregarvalorespilausu():
    pila = [1,2,3]
    print(pila)
    print()

    while True:
        new_num1 = []
        new_num1 = int(input("ingresa un nuevo valor: "))
        pila.append(new_num1)
        opcion = input("Deseas continuar?  (s/n): ")
        if opcion.upper() != "S":
            print(pila)
            break

def listapalabras():
    nombresop6 = []
    numero = int(input("Cuantos nombres vas a escribir? "))
    for i in range(numero):
        nombre = (input("Nombre completo: "))
        nombresop6.append(nombre)
    print(str(nombresop6))

def cantidadlistas():
    num_listas = int(input("Cuantas listas quieres crear? "))
    listas = []
    for i in range(num_listas):
        lista = []
        num_nombre = int(input("Cuantos nombres vas a escribir? "))
        for j in range(num_nombre):
            nombre = (input("Nombre completo: "))
            lista.append(nombre)
        listas.append(lista)
    print(str(listas))

def llenar_lista():
    nombres = []
    num_nombres = int(input("Cuantos nombres vas a escribir en esta lista? "))

    for i in range(num_nombres):

        nombre = (input("Nombre completo: "))
        nombres.append(nombre)

    return nombres

def capturar_matriz():
    matriz = []

    for i in range(3):
        renglon = []
        for j in range(3):
            num = int(input("Ingresa un numero: "))
            renglon.append(num)

        matriz.append(renglon)

    return matriz

def tamanio_matriz():
    num_reglones = int(input("Cuantos renglones tendra la matriz? "))
    num_columas = int(input("Cuantas columnas tendra esta matriz? "))
    matriz = []

    for i in range(num_reglones):
        renglon = []
        for j in range(num_columas):
            num = int(input("Ingresa un numero: "))
            renglon.append(num)

        matriz.append(renglon)

    return matriz

class Estudiante:
    def __init__(self, nombre, edad):
        self.nombre = nombre
        self.edad = edad


class RegistroEstudiantes:
    def __init__(self):
        self.estudiantes = []

    def agregar_estudiante(self, estudiante):
        self.estudiantes.append(estudiante)

    def mostrar_estudiantes(self):
        for estudiante in self.estudiantes:
            print(f"Nombre: {estudiante.nombre}, Edad: {estudiante.edad}")

registroest = RegistroEstudiantes()

class Producto:
    def __init__(self, nombre, precio):
        self.nombre = nombre
        self.precio = precio


class Tienda:
    def __init__(self):
        self.productos = []

    def agregar_producto(self, producto):
        self.productos.append(producto)

    def mostrar_productos(self):
        print()
        print("------------MayaElectronics-----------")
        print("domiciliofalso 12458 calle ncvjnv")
        print("Lista de Productos disponibles en tienda:")
        print()
        print("--------------------------------------")
        for producto in self.productos:
            print(f"Nombre: {producto.nombre}, Precio: ${producto.precio}")
        print("--------------------------------------")

registrotien = Tienda()

class ConversorMonedas:
    def __init__(self, tasa_cambio):
        self.tasa_cambio = tasa_cambio

    def convertir(self, cantidad, moneda_origen, moneda_destino):
        cantidad_convertida = cantidad * self.tasa_cambio
        return cantidad_convertida, moneda_destino

class Moneda:
    def __init__(self, nombre, simbolo):
        self.nombre = nombre
        self.simbolo = simbolo

def ingresar_moneda():
    nombre = input("Ingrese el nombre de la moneda: ")
    simbolo = input("Ingrese el símbolo de la moneda: ")
    return Moneda(nombre, simbolo)

def ingresar_cantidad():
    cantidad = float(input("Ingrese la cantidad a convertir: "))
    return cantidad

def mostrar_resultado(cantidad_origen, moneda_origen, cantidad_destino, moneda_destino):
    print(f"{cantidad_origen} {moneda_origen.simbolo} son equivalentes a {cantidad_destino} {moneda_destino.simbolo}")

class Empleado:
    def __init__(self, nombre, salario):
        self.nombre = nombre
        self.salario = salario


class Tiendados:
    def __init__(self):
        self.empleados = []

    def agregar_empleado(self, empleado):
        self.empleados.append(empleado)

    def mostrar_productos(self):
        print()
        print("------------Mayaassembly-----------")
        print("domiciliofalso 12458 calle ncvjnv")
        print("Lista de Empleados registrados en el negocio:")
        print()
        print("--------------------------------------")
        for producto in self.empleados:
            print(f"Nombre: {producto.nombre}, Salario: ${producto.salario}")
        print("--------------------------------------")

registrotiendos = Tiendados()

class CarritoCompras:
    def __init__(self):
        self.productos = []

    def agregar_producto(self, producto):
        self.productos.append(producto)

    def Calcular_total(self):
        total = 0
        for producto in self.productos:
            total += producto.precio
        return total

    def generar_nota_venta(self):
        print()
        print("------------MayaElectronics-----------")
        print("domiciliofalso 12458 calle ncvjnv")
        print("Lista de Productos a pagar:")
        print()
        print("--------------------------------------")
        for producto in self.productos:
            print(f"Nombre: {producto.nombre}, Precio: ${producto.precio}")
        print("--------------------------------------")
        total = self.Calcular_total()
        print(f"Total a pagar: ${total}")

def obtener_contenido(url):
    response = requests.get(url)
    if response.status_code == 200:
        return response.text
    else:
        return None

registrotiendtres = CarritoCompras()

def suma(num1,num2):
    totalsum = num1 + num2
    print(totalsum)

def multi(num1,num2):
    totalmulti = num1 + num2
    print(totalmulti)

    print("-----------------Ruben Moises Nuñez Flores---------------")
    print("------------Desarrollo de Software Backend 1-------------")
    print("-----------Ingenieria en Desarrollo de Software----------")
    print("---Menu de los programas realizados durante el bloque ---")
    time.sleep(5)

while (True):

    limpiar_pantalla()
    print("-----------------Ruben Moises Nuñez Flores---------------")
    print()
    print()
    print("--------------------Menu de programas--------------------")
    print()
    print("1. Ejecicios con los tipos de datos numericos y String")
    print("2. Variables, Opr Log, Opr Bsc, if y else")
    print("3. Ciclos (Nota de venta)")
    print("4. Listas, Arreglos, Pilas y Colas")
    print("5. Pilas (Practico)")
    print("6. Matrices, Pilas y Funciones")
    print("7. Practico, Clases, Funciones, Variables y Ciclos")
    print("8. 10 Librerias")
    print("9. Practica a lapiz")
    print("10. Salir")
    print()
    option = int(input("Por favor selecciona una de las siguiente opciones: "))

    if option == 1:
        limpiar_pantalla()
        print("Has seleccionado [Datos numericos y String]")
        capturar_nombre()
        print("Vamos a realizar la siguiente operacion matematica: ((3+2)/(2*5))^2")
        resultado = ((3+2)/(2*5))**2
        print(resultado)
        print("Vamos a calcular un sueldo")
        sueldo()
        print("Vamos a calcular el Indice de Masa Corporal")
        indMasaCorpo()
        print("Vamos a calcular el peso total de un paquete")
        pesopaquete()
        print("Vamos a comparar el balance de una inversion durante 3 años")
        blncata()
        print("Vamos a utilizar la siguiente formula: (n * (n+1))/2")
        formula()
        time.sleep(3)

    elif option == 2:
        limpiar_pantalla()
        print("Has seleccionado [Variables, Opr Log, Opr Bsc, if y else]")
        print("Vamos a generar una nota de venta de 3 articulos")
        print()
        articulo1 = input("Ingresa el nomobre del primer articulo: ")
        precio1 = float(input("Ingrersa el precio del primer articulo: $"))
        print()
        articulo2 = input("Ingresa el nomobre del segundo articulo: ")
        precio2 = float(input("Ingrersa el precio del segundo articulo: $"))
        print()
        articulo3 = input("Ingresa el nomobre del tercer articulo: ")
        precio3 = float(input("Ingrersa el precio del tercer articulo: $"))
        print()
        subtotal = precio1 + precio2 + precio3
        if subtotal==500 or subtotal>500:
            totalf = (subtotal*1.02)
        else:
            totalf = (subtotal*1.05)
        print()
        print("---------------------------------------")
        print(articulo1)
        print(precio1)
        print()
        print(articulo2)
        print(precio2)
        print()
        print(articulo3)
        print(precio3)
        print("---------------------------------------")
        print("Total a pagar: $" +str(round(totalf,2)))
        time.sleep(3)

    
    elif option == 3:
        limpiar_pantalla()
        print("Has seleccionado [Ciclos (Nota de venta)]")
        print("Vamos a generar una nota de venta de n cantidad de articulos hasta que el usuario decida salir de la nota de venta")
        while True:

            nombres = []
            precios = []

            cantidad_articulos = int(input("Ingrese la cantidad de artículos: "))
            for i in range(cantidad_articulos):
                nombre = input("Ingrese el nombre del artículo: ")
                precio = float(input("Ingrese el precio del artículo: $"))
                nombres.append(nombre)
                precios.append(precio)

            impr_notaventa(nombres, precios)
            opcion1 = input("Desea comprar mas articulos en una nota de venta nueva (S/N)?: ")
            if opcion1.upper() != "S":
                break
        time.sleep(4)

    elif option == 4:
        limpiar_pantalla()
        print("Has seleccionado [Listas, Arreglos, Pilas y Colas]")
        print("Esta tarea fue una investigacion, pero dejaremos los siguientes ejemplos: ")
        listaejem = [1,2,3,4,5]
        print("Ejemplo de lista: ")
        print(listaejem)
        print("Un ejemplo de arreglos serian la nota de venta vista en la opcion numero 3 de nuestro menu")
        print("Ejemplo de pilas: ")
        pilaejem = [3,4,5]
        pilaejem.append(6)
        pilaejem.append(7)
        print(pilaejem)
        time.sleep(4)
    
    elif option == 5:
        limpiar_pantalla()
        print("Has seleccionado [Pilas (Practico)]")
        print("Vamos agragar un valor a la pila utilizando una variable e imprimiendola: ")
        pilaopc = [1,2,3]
        print(pilaopc)
        new_num = input("Eliga el numero a agregar a la pila: ")
        pilaopc.append(new_num)
        print(pilaopc)
        agregarvalorespila()
        print()
        agregarvalorespilausu()
        time.sleep(3)
    
    elif option == 6:
        limpiar_pantalla()
        print("Has seleccionado [Matrices, Pilas y Funciones]")
        print("Primero una lista de palabras donde especifiquemos la cantidad que podemos agregar e imprimir la lista: ")
        listapalabras()
        print()
        print("Despues creamos un programa para crear multiples listas: ")
        cantidadlistas()
        print("Hola, vamos a llenar una lista definiendo una funcion: ")
        mi_lista=llenar_lista()
        print(mi_lista)
        print()
        print("Hola, vamos a llenar una matriz definiendo una funcion")
        mi_matriz=capturar_matriz()
        print("Matriz: ")
        for renglon in mi_matriz:
            print(renglon)
        time.sleep(4)
        print()
        limpiar_pantalla()
        print("Ahora preguntaremos el tamaño de la matriz: ")
        mi_matriz=tamanio_matriz()
        print("Matriz: ")
        for renglon in mi_matriz:
            print(renglon)
        time.sleep(4)
        limpiar_pantalla()
        print("Ahora haremos un pequeñoo menu con la opcion de agregar 5 nombres en una lista y generar una matriz: ")
        while True:
            print("Hola Usuario,")
            print()
            print("Menu")
            print("Seleccione una de las siguientes opciones")
            print("1. Lista de 5 nombres")
            print("2. Generar una matriz")
            print("3. Salir")
            option2 = int(input("Opcion seleccionada: "))

            if option2 == 1:
                print("Usted a seleccionado: Lista de 5 nombres")
                mi_lista=llenar_lista()
                print(mi_lista)
        
            elif option2 == 2:
                print("Usted a seleccionado: Generar una matriz")
                mi_matriz=capturar_matriz()
                print(mi_matriz)
    
            elif option2 == 3:
                print("Nos vemos luego!")
                break

            else: 
                print("Opcion Invalida")
        time.sleep(4)

    elif option == 7:
        limpiar_pantalla()
        print("Has seleccionado [Practico, Clases, Funciones, Variables y Ciclos]")
        print("Vamos a relizar un registro de estudiantes: ")
        while True:
            nombre = input("Ingrese el nombre del estudiante (o 'salir' para finalizar): ")
            if nombre == "salir":
                break
            edad = int(input("Ingrese la edad del estudiante: "))
            estudiante = Estudiante(nombre, edad)
            registroest.agregar_estudiante(estudiante)
        registroest.mostrar_estudiantes()
        print()
        print("Vamoos hacer una tienda de productos: ")
        while True:
            nombre = input("Ingrese el nombre del producto (o 'salir' para finalizar): ")
            if nombre == "salir":
                break
            precio = float(input("Ingrese el precio del producto: $"))
            producto = Producto(nombre, precio)
            registrotien.agregar_producto(producto)
        registrotien.mostrar_productos()
        print()
        print("Vamos hacer una conversion de moneda: ")
        while True:
            print("Ingrese los detalles de la primera moneda:")
            moneda_origen = ingresar_moneda()
            print("Ingrese los detalles de la segunda moneda:")
            moneda_destino = ingresar_moneda()
            cantidad_origen = ingresar_cantidad()
            conversion = float(input(f"Ingrese la tasa de cambio de {moneda_origen.nombre} a {moneda_destino.nombre}: "))
            conversor = ConversorMonedas(conversion)
            cantidad_convertida, _ = conversor.convertir(cantidad_origen, moneda_origen, moneda_destino)
            mostrar_resultado(cantidad_origen, moneda_origen, cantidad_convertida, moneda_destino)
            respuesta = input("¿Desea realizar otra conversión? (s/n): ")
            if respuesta.lower() != "s":
                break
        print()
        print("Vamos hacer un registro de empleados: ")
        while True:
            nombre = input("Ingrese el nombre del Empleado (o 'salir' para finalizar): ")
            if nombre == "salir":
                break
            salario = float(input("Ingrese el salario del empleado: $"))
            empleado = Empleado(nombre, salario)
            registrotiendos.agregar_empleado(empleado)
        registrotiendos.mostrar_productos()
        print()
        print("Ahora veamos un carrito de compras: ")
        while True:
            nombre = input("Ingrese el nombre del producto (o 'salir' para finalizar): ")
            if nombre == "salir":
                break
            precio = float(input("Ingrese el precio del producto: $"))
            producto = Producto(nombre, precio)
            registrotiendtres.agregar_producto(producto)

        registrotiendtres.generar_nota_venta()
        time.sleep(5)

    elif option == 8:
        limpiar_pantalla()
        print("Has seleccionado [10 Librerias]")
        print("1. Numpy")
        a = np.array([1, 2, 3, 4, 5])
        b = np.sin(a)
        print(b)  
        time.sleep(3)
        print()
        print("2. Pandas")
        data = {'Nombre': ['Ruben', 'Daniel', 'Pedro'],
        'Edad': [28, 27, 26]}
        df = pd.DataFrame(data)
        df['Edad Duplicada'] = df['Edad'] * 2
        print(df)
        time.sleep(3)
        print()
        print("3. Matplotlib")
        # Datos de ejemplo
        x = [1, 2, 3, 4, 5]
        y = [2, 4, 6, 8, 10]
        # Crear un gráfico de líneas
        plt.plot(x, y)
        # Mostrar el gráfico
        plt.show()
        time.sleep(3)
        print()
        print("4. ScikitLearn")
        x = [[1], [2], [3], [4], [5]]
        y = [2, 4, 6, 8, 10]
        model = LinearRegression()
        model.fit(x, y)
        y_pred = model.predict([[6]])
        print(y_pred)
        time.sleep(3)  
        print()
        print("5. TensoorFlow")
        # Cargar el conjunto de datos MNIST
        (x_train, y_train), (x_test, y_test) = mnist.load_data()
        # Preprocesamiento de los datos
        x_train = x_train.reshape(60000, 784) / 255.0
        x_test = x_test.reshape(10000, 784) / 255.0
        y_train = tf.keras.utils.to_categorical(y_train, 10)
        y_test = tf.keras.utils.to_categorical(y_test, 10)
        # Crear el modelo de red neuronal
        model = Sequential()
        model.add(Dense(512, activation='relu', input_shape=(784,)))
        model.add(Dense(10, activation='softmax'))
        # Compilar el modelo
        model.compile(loss='categorical_crossentropy',
              optimizer='adam',
              metrics=['accuracy'])
        # Entrenar el modelo
        model.fit(x_train, y_train, batch_size=128, epochs=10, verbose=1)
        # Evaluar el modelo
        score = model.evaluate(x_test, y_test, verbose=0)
        print('Test loss:', score[0])
        print('Test accuracy:', score[1])
        print()
        time.sleep(3)  
        print("6. Keras")
        # Datos de entrada y salida ficticios
        X_train = np.array([[0, 0], [0, 1], [1, 0], [1, 1]])
        y_train = np.array([[0], [1], [1], [0]])
        #Crear el modelo de red neuronal
        model = Sequential()
        model.add(Dense(4, input_dim=2, activation='relu'))
        model.add(Dense(1, activation='sigmoid'))
        # Compilar el modelo
        model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])
        # Entrenar la red neuronal
        model.fit(X_train, y_train, epochs=10, batch_size=4)
        # Datos de entrada para hacer predicciones
        X_test = np.array([[0, 0], [0, 1], [1, 0], [1, 1]])
        # Obtener predicciones
        predictions = model.predict(X_test)
        # Imprimir las predicciones
        print(predictions)
        print()
        time.sleep(3)  
        print("7. BeautifulSoup")
        # Obtener el contenido de una página web
        response = requests.get('https://www.google.com/?hl=es')
        html = response.content
        # Crear un objeto BeautifulSoup
        soup = BeautifulSoup(html, 'html.parser')
        # Encontrar todos los enlaces en la página
        links = soup.find_all('a')
        for link in links:
            print(link.get('href'))
        print()
        time.sleep(3)  
        print("8. Request")
        # URL de ejemplo
        url_ejemplo = "https://www.ejemplo.com"
        # Llamada a la función para obtener el contenido de la página
        contenido = obtener_contenido(url_ejemplo)
        # Imprimir el contenido de la página si se obtuvo correctamente
        if contenido is not None:
            print(contenido)
        else:
            print("No se pudo obtener el contenido de la página")
        print()
        time.sleep(3)  
        print("9. Pygame")
        print("El juego solamente muestra una pantalla en negro....")
        # Inicializar pygame
        pygame.init()
        # Crear una ventana
        screen = pygame.display.set_mode((800, 600))
        # Ejecutar el bucle principal del juego
        running = True
        while running:
            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    running = False
            # Actualizar la ventana
            pygame.display.flip()
        # Finalizar pygame
        pygame.quit()
        print()
        time.sleep(3)  
        print("10. Open cv2")
        print("Voy a comentar el siguiente codigo devido a que no pude encontrar la solucion a un error que me daba al correrlo: ")
        print("(Comentario)Ruta de la imagen")
        print("ruta_imagen = Us ers \rube n\Deskto p\IOmage nes D is\Ace .png")
        print("(Comentario)Cargar la imagen desde el disco")
        print("imagen = cv2.imread(ruta_imagen)")
        print("(Comentario)Mostrar la imagen en una ventana")
        print("cv2.imshow(Imagen, imagen)")
        print("cv2.waitKey(0)")
        print("cv2.destroyAllWindows()")
        time.sleep(5)  
        print()
        time.sleep(4)

    elif option == 9:
        limpiar_pantalla()
        print("Has seleccionado [Practica a lapiz]")
        print("Es una clase, dos funciones un ciclo, operadores logicos y una lista: ")
        while True:
            nombre = input("Ingrese el nombre del estudiante (o 'salir' para finalizar): ")
            if nombre == "salir":
                break
            edad = int(input("Ingrese la edad del estudiante: "))
            estudiante = Estudiante(nombre, edad)
            registroest.agregar_estudiante(estudiante)
        registroest.mostrar_estudiantes()
        print()
        while(True):
            num1 = 3
            num2 = 4
            listalapiz = [1,2,3,4,5]
            suma(num1,num2)
            multi(num1,num2)
            print(listalapiz)
            time.sleep(4)
            frespuesta = input("¿Desea continuar (s/n): ")
            if frespuesta.lower() != "s":
                break
        time.sleep(4)

    elif option == 10:
        limpiar_pantalla()
        print("Nos vemos!")
        break

    else: 
        limpiar_pantalla()
        print("Opcion Invalida")
        time.sleep(2)